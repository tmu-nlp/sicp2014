(define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))

(define (make-rat n d)
    (define (sgn x)
        (if (< x 0)
            -1
            1))
    (let ((g (gcd (abs n) (abs d))))
         (cons (* (sgn d) (/ n g)) (/ (abs d) g))))
(define (numer x) (car x))
(define (denom x) (cdr x))

(define (print-rat x)
    (newline)
    (display (numer x))
    (display "/")
    (display (denom x)))

(print-rat (make-rat 3 2))
(print-rat (make-rat -3 2))
(print-rat (make-rat 3 -2))
(print-rat (make-rat -3 -2))
(print-rat (make-rat 2 4))
(print-rat (make-rat -2 4))
(print-rat (make-rat 2 -4))
(print-rat (make-rat -2 -4))
(print-rat (make-rat 6 3))
(print-rat (make-rat -6 3))
(print-rat (make-rat 6 -3))
(print-rat (make-rat -6 -3))
(print-rat (make-rat 2 6))
(print-rat (make-rat -2 6))
(print-rat (make-rat 2 -6))
(print-rat (make-rat -2 -6))
