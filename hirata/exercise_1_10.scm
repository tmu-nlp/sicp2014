#!/usr/local/bin/gosh

;Exercise 1.10: 以下の手続はアッカーマン関数と呼ばれる数学の関数を計算する。
;(define (A x y)
;	(cond ((= y 0) 0)
;		((= x 0) (* 2 y))
;		((= y 1) 2)
;		(else (A (- x 1) (A x (- y 1))))))
;以下の式の値はいくつであるか?
;(A 1 10) 
;(A 2 4) 
;(A 3 3)
;A が上で定義された手続である時、以下の手続について考察せよ。
;(define (f n) (A 0 n)) 
;(define (g n) (A 1 n)) 
;(define (h n) (A 2 n)) 
;(define (k n) (* 5 n n))
;n が正の整数である場合に手続 f, g, h により計算される関数の数学上の定義について簡明に答えよ。例として(kn)は5n^2を計算 する

(define (A x y)
	(cond ((= y 0) 0)
		((= x 0) (* 2 y))
		((= y 1) 2)
		(else (A (- x 1) (A x (- y 1))))))

;実行してみる
(print (A 1 10))	;1024
(print (A 2 4))		;65536
(print (A 3 3))		;65536

;自分で手続やってみる
;(A 1 10)
;(A 0 (A 1 9))
;(A 0 (A 0 (A 1 8)))
;…						;面倒なので省略
;(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
;(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
;(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
;…
;(A 0 512)
;1024

(define (f n) (A 0 n)) 
(define (g n) (A 1 n)) 
(define (h n) (A 2 n)) 
(define (k n) (* 5 n n))

;自分で手続してみる
;(f 2)
;(A 0 2)
;(* 2 2)				;(f n)はnに2をかけた数になる．

;(g 3)
;(A 1 2)
;(A 0 (A 1 2))
;(A 0 (A 0 (A 1 1)))
;(A 0 (A 0 2))
;(A 0 (* 2 2))
;(A 0 4)
;(* 2 4)
;8						;(g n)は2のn乗

;(h 2)
;(A 1 (A 2 (- n 1)))                   ;=> 2^(h (- n 1))
;(A 1 (A 1 (A 2 (- n 2))))             ;=> 2^2^(h (- n 2))
;(A 1 (A 1 (A 1 (A 2 (- n 3)))))       ;=> 2^2^2^(h (- n 3))
;(A 1 (A 1 (A 1 (A 1 (A 2 (- n 4)))))) ;=> 2^2^2^2^(h (- n 4))
;(h n)は2^2^2^2^…^2(n個)
