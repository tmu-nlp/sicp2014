(define (next x)
  (cond ((= x 2) 3)
		(else (+ x 2))))
(define (runtime)
    (- (time->seconds (current-time)) 1136041200))
(define (square x)
  (* x x))
(define (smallest-divisor n) (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
		((divides? test-divisor n) (next test-divisor))
		(else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (timed-prime-test n)
  (newline) (display n) (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
	(report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ") (display elapsed-time))

(define (re-print x) 
  (cond ((<= x 110)
	 ;(print x)
	 (print (timed-prime-test x))
	 (re-print (+ x 1)))))
(re-print 100)

;(define (search-for-primes x)
